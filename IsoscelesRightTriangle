#include "Square.hpp"

Square::Square(double w) : Rectangle(w, w) {
    Rectangle(w, w);
    //super()
    width = w;
    height = w;
}
#ifndef SQUARE_HPP
#define SQUARE_HPP
#include "Rectangle.hpp"

class Square : public Rectangle{
    public:
        Square(double w);
};

#endif // SQUARE_HPP





// IsoscelesRightTriangle class inheriting from RightTriangle
class IsoscelesRightTriangle : public RightTriangle {
public:
    IsoscelesRightTriangle(double legLength) 
        : RightTriangle(legLength, legLength) {
        // The legs of the isosceles right triangle are equal
    }
};

// Main function to test IsoscelesRightTriangle
int main() {
    // Create an IsoscelesRightTriangle with leg length 3
    IsoscelesRightTriangle isoTriangle(3);

    // Test getArea() and getPerimeter()
    assert(isoTriangle.getArea() == 4.5);  // Area = 0.5 * 3 * 3
    assert(isoTriangle.getPerimeter() == 3 + 3 + std::sqrt(18));  // Perimeter = leg + leg + hypotenuse

    // Output results
    std::cout << "Area: " << isoTriangle.getArea() << std::endl;
    std::cout << "Perimeter: " << isoTriangle.getPerimeter() << std::endl;

    std::cout << "All tests passed!" << std::endl;

    return 0;
}
